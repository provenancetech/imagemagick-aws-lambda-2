name: Deploy Lambda Layer
permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
      reason:
        description: 'Reason'
        required: true
        default: 'dev'
      stackName:
        description: 'Stack name if not using default'
        required: false
        default: '-'
      awsRegion:
        required: true
        description: AWS awsRegion
        default: us-west-2
        options:
          - 'us-west-2'
          - 'us-east-2'

env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  REASON: ${{ github.event.inputs.reason }}
  AWS_REGION: ${{ github.event.inputs.awsRegion }}
  NEW_STACK_NAME: ${{ github.event.inputs.stackName }}
  DEV_AWS_ACCESS_KEY_ID: ${{ secrets.GHA_DEV_AWS_ACCESS_KEY }}
  DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.GHA_DEV_AWS_SECRET_KEY }}
  STAGING_AWS_ACCESS_KEY_ID: ${{ secrets.GHA_STAGING_AWS_ACCESS_KEY }}
  STAGING_AWS_SECRET_ACCESS_KEY: ${{ secrets.GHA_STAGING_AWS_SECRET_KEY }}
  PROD_AWS_ACCESS_KEY_ID: ${{ secrets.GHA_PROD_AWS_ACCESS_KEY }}
  PROD_AWS_SECRET_ACCESS_KEY: ${{ secrets.GHA_PROD_AWS_SECRET_KEY }}

jobs:
  deploy:
    name: Deploy the full stack to cloudformation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4

      - name: Set dev AWS credentials
        if: env.ENVIRONMENT == 'dev' || env.ENVIRONMENT == 'dev-dr' || env.ENVIRONMENT == 'load'
        run: |
          echo "AWS_ACCESS_KEY_ID=${DEV_AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${DEV_AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV

      - name: Set staging AWS credentials
        if: env.ENVIRONMENT == 'staging'
        run: |
          echo "AWS_ACCESS_KEY_ID=${STAGING_AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${STAGING_AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV

      - name: Set prod AWS credentials
        if: env.ENVIRONMENT == 'prod' || env.ENVIRONMENT == 'prod-dr'
        run: |
          echo "AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          echo -e "Checking for required packages...\n"

          if ! command -v aws &>/dev/null; then
            echo "AWS CLI is not installed on the host. Installing now..."
            sudo apt -qq update
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install python dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: ".github/workflows/requirements.txt"

      - name: Configure AWS Region
        run: echo "AWS_DEFAULT_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

      - name: Run deploy (default stackname)
        if: env.NEW_STACK_NAME == '-'
        shell: bash
        run: |
          make all && make deploy DEPLOYMENT_BUCKET=pti-${{ env.REASON }}-cluster-assets-bucket STACK_NAME=serverlessrepo-pti-${{ env.REASON }}-image-magick-lambda-layer2

      - name: Run deploy (Custom stackname)
        if: env.NEW_STACK_NAME != '-'
        shell: bash
        run: |
          make all && make deploy DEPLOYMENT_BUCKET=pti-${{ env.REASON }}-cluster-assets-bucket STACK_NAME=${{ env.NEW_STACK_NAME }}
